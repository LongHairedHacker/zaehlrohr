!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AVRMCU	Makefile	/^AVRMCU = atmega8$/;"	m
BAUD	uart.h	12;"	d
BAUD_ERROR	uart.h	18;"	d
BAUD_REAL	uart.h	17;"	d
CC	Makefile	/^CC = avr-gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Os -Wall -Wstrict-prototypes $/;"	m
FIFO_H_	fifo.h	2;"	d
FIFO_TYPE	fifo.h	14;"	d
F_CPU	Makefile	/^F_CPU = 16000000$/;"	m
HEADERS	Makefile	/^HEADERS = uart.h timer.h tubes.h fifo.h$/;"	m
IDLE	tubes.h	/^	IDLE, $/;"	e	enum:TubeStatus
INPUTBUFFER_SIZE	main.c	13;"	d	file:
ISPPORT	Makefile	/^ISPPORT = \/dev\/kaboard$/;"	m
ISR	timer.c	/^ISR(TIMER0_OVF_vect) {$/;"	f
OBJ	Makefile	/^OBJ = $(SRC:%.c=$(OBJDIR)\/%.o)$/;"	m
OBJCOPY	Makefile	/^OBJCOPY = avr-objcopy$/;"	m
OBJDIR	Makefile	/^OBJDIR = bin$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = avr-objdump$/;"	m
ONE_TO_TWO	fifo.h	/^	enum { ONE_TO_TWO, TWO_TO_ONE} direction;$/;"	e	enum:__anon1::__anon2
OUTPUTBUFFER_SIZE	main.c	12;"	d	file:
RESET	main.c	/^enum {RESET, RUNNING, WAITACK} state;$/;"	e	enum:__anon5	file:
RUNNING	main.c	/^enum {RESET, RUNNING, WAITACK} state;$/;"	e	enum:__anon5	file:
SIZE	Makefile	/^SIZE = avr-size$/;"	m
SRC	Makefile	/^SRC = main.c uart.c timer.c tubes.c fifo.c$/;"	m
TARGET	Makefile	/^TARGET = zahlrohr-$(AVRMCU)$/;"	m
TIMER_H_	timer.h	2;"	d
TRIG1	tubes.h	/^	TRIG1, $/;"	e	enum:TubeStatus
TRIG2	tubes.h	/^	TRIG2$/;"	e	enum:TubeStatus
TUBECOUNT	tubes.h	9;"	d
TUBES_H	tubes.h	2;"	d
TWO_TO_ONE	fifo.h	/^	enum { ONE_TO_TWO, TWO_TO_ONE} direction;$/;"	e	enum:__anon1::__anon2
Tube	tubes.h	/^} Tube;$/;"	t	typeref:struct:__anon3
TubeEvent	fifo.h	/^} TubeEvent;$/;"	t	typeref:struct:__anon1
TubeState	tubes.h	/^} TubeState;$/;"	t	typeref:struct:__anon4
TubeStatus	tubes.h	/^enum TubeStatus {$/;"	g
UART_H_	uart.h	2;"	d
UART_TIMEOUT	uart.h	13;"	d
UBRR_VAL	uart.h	16;"	d
VERSION	Makefile	/^VERSION = 0.1$/;"	m
WAITACK	main.c	/^enum {RESET, RUNNING, WAITACK} state;$/;"	e	enum:__anon5	file:
checkCommand	main.c	/^uint8_t checkCommand(const char* cmd) {$/;"	f
data	fifo.h	/^	FIFO_TYPE *data;$/;"	m	struct:fifo
ddr	tubes.h	/^	volatile uint8_t *ddr;$/;"	m	struct:__anon3
direction	fifo.h	/^	enum { ONE_TO_TWO, TWO_TO_ONE} direction;$/;"	m	struct:__anon1	typeref:enum:__anon1::__anon2
eventfifo	fifo.c	/^struct fifo eventfifo; /;"	v	typeref:struct:fifo
fifo	fifo.h	/^struct fifo {$/;"	s
fifo_clear	fifo.h	/^static inline void fifo_clear(struct fifo *f) {$/;"	f
fifo_empty	fifo.h	/^static inline uint8_t fifo_empty(struct fifo *f) {$/;"	f
fifo_full	fifo.h	/^static inline uint8_t fifo_full(struct fifo *f) {$/;"	f
fifo_get	fifo.h	/^static inline FIFO_TYPE fifo_get(struct fifo *f) {$/;"	f
fifo_init	fifo.h	/^static inline void fifo_init(struct fifo *f, uint8_t size, FIFO_TYPE *data) {$/;"	f
fifo_put	fifo.h	/^static inline void fifo_put(struct fifo *f, FIFO_TYPE value) {$/;"	f
generateEventMessage	main.c	/^void generateEventMessage(const TubeEvent event) {$/;"	f
inputbuffer	main.c	/^char inputbuffer[INPUTBUFFER_SIZE];$/;"	v
len	fifo.h	/^	uint8_t len;$/;"	m	struct:fifo
main	main.c	/^int main(void) {$/;"	f
milliseconds	timer.c	/^volatile uint16_t milliseconds;$/;"	v
milliseconds	tubes.h	/^	uint16_t milliseconds;$/;"	m	struct:__anon4
msg	settimer.py	/^	msg = str(int(time.time())) + "#"$/;"	v
outputbuffer	main.c	/^char outputbuffer[OUTPUTBUFFER_SIZE];$/;"	v
pin	tubes.h	/^	volatile uint8_t *pin;$/;"	m	struct:__anon3
pinmask1	tubes.h	/^	uint8_t pinmask1, pinmask2;$/;"	m	struct:__anon3
pinmask2	tubes.h	/^	uint8_t pinmask1, pinmask2;$/;"	m	struct:__anon3
port	tubes.h	/^	volatile uint8_t *port;$/;"	m	struct:__anon3
post_event	timer.c	/^static inline void post_event(uint8_t id) {$/;"	f	file:
read	fifo.h	/^	uint8_t read;$/;"	m	struct:fifo
retriggerdelay	tubes.h	/^	uint8_t retriggerdelay;$/;"	m	struct:__anon4
ser	settimer.py	/^ser = serial.Serial('\/dev\/ttyUSB0', 9600, timeout=2)$/;"	v
serial	settimer.py	/^import serial$/;"	i
set_idle	timer.c	/^static inline void set_idle(uint8_t id, uint8_t set_retriggerdelay) {$/;"	f	file:
set_triggered	timer.c	/^static inline void set_triggered(uint8_t id, enum TubeStatus status) {$/;"	f	file:
size	fifo.h	/^	uint8_t size;$/;"	m	struct:fifo
state	main.c	/^enum {RESET, RUNNING, WAITACK} state;$/;"	v	typeref:enum:__anon5
state_reset	main.c	/^static inline void state_reset(void) {$/;"	f	file:
state_running	main.c	/^static inline void state_running(void) {$/;"	f	file:
state_waitack	main.c	/^static inline void  state_waitack(void) {$/;"	f	file:
status	tubes.h	/^	enum TubeStatus status;$/;"	m	struct:__anon4	typeref:enum:__anon4::TubeStatus
syncTime	main.c	/^void syncTime(const char* stamp) {$/;"	f
sys	settimer.py	/^import sys$/;"	i
time	fifo.h	/^	uint16_t time;$/;"	m	struct:__anon1
time	settimer.py	/^import time$/;"	i
timeoutdelay	tubes.h	/^	uint16_t timeoutdelay;$/;"	m	struct:__anon4
timer_init	timer.h	/^static inline void timer_init(void) {$/;"	f
timer_set	timer.h	/^static inline void timer_set(uint32_t stamp) {$/;"	f
timestamp	fifo.h	/^	uint32_t timestamp;$/;"	m	struct:__anon1
timestamp	timer.c	/^volatile uint32_t timestamp;$/;"	v
tube	tubes.c	/^const Tube tube[TUBECOUNT] = {$/;"	v
tubeeventdata	tubes.c	/^TubeEvent tubeeventdata[8];$/;"	v
tubenumber	fifo.h	/^	uint8_t tubenumber;$/;"	m	struct:__anon1
tubes_init	tubes.c	/^void tubes_init(void) {$/;"	f
tubestate	tubes.c	/^TubeState tubestate[TUBECOUNT];$/;"	v
uart_clear_time_out	uart.h	/^static inline void uart_clear_time_out(void) {$/;"	f
uart_get_line	uart.c	/^uint8_t uart_get_line(char buffer[], uint8_t maxlen) {$/;"	f
uart_getc	uart.h	/^static inline uint8_t uart_getc(void) {$/;"	f
uart_getc_timeout	uart.c	/^uint8_t uart_getc_timeout(void) {$/;"	f
uart_has_timed_out	uart.h	/^static inline uint8_t uart_has_timed_out(void) {$/;"	f
uart_init	uart.c	/^void uart_init(void) {$/;"	f
uart_putc	uart.h	/^static inline void uart_putc(uint8_t data) {$/;"	f
uart_puts	uart.h	/^static inline void uart_puts(char *data) {$/;"	f
uart_timed_out	uart.c	/^uint8_t uart_timed_out = 0;$/;"	v
write	fifo.h	/^	uint8_t write;$/;"	m	struct:fifo
